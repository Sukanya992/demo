pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "sukanya996/flaskimg-app:${BUILD_NUMBER}" // Custom image with build number
        DOCKER_IMAGE_LATEST = "sukanya996/flaskimg-app:latest"   // Latest tag for deployment
        GKE_CLUSTER = "cluster-1"
        GKE_ZONE = "us-central1-c	"
        PROJECT_ID = "your-gcp-project-id"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git 'https://github.com/Sukanya992/demo.git'  // Update with your actual GitHub repo
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t $DOCKER_IMAGE ."
                sh "docker tag $DOCKER_IMAGE $DOCKER_IMAGE_LATEST"
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'sukanya996', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh "echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin"
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                sh "docker push $DOCKER_IMAGE"
                sh "docker push $DOCKER_IMAGE_LATEST"
            }
        }

        stage('Authenticate with GKE') {
            steps {
                withCredentials([file(credentialsId: 'gcp-sa-key', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    sh """
                        gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                        gcloud config set project $PROJECT_ID
                        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE
                    """
                }
            }
        }

        stage('Deploy to GKE') {
            steps {
                sh "kubectl set image deployment/flaskapp flask-app=$DOCKER_IMAGE_LATEST --record"
                sh "kubectl apply -f deployment.yaml"
            }
        }
    }
}
